buildscript {
    repositories {
        jcenter()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "http://maven.k-int.com/content/repositories/releases" }
    }
    dependencies {
	    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
	    classpath "org.grails.plugins:hibernate5:7.0.4"
	    classpath "org.grails.plugins:views-gradle:2.0.2"
	    classpath "com.k_int.gradle:kint-gradle-plugin:2.0.0"
    }
}

group "com.k_int.grails"

apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "com.k_int.gradle.plugin"
apply plugin: "com.k_int.gradle.conventional-git"

repositories {
  jcenter()
  maven { url "https://repo.grails.org/grails/core" }
  maven { url "https://dl.bintray.com/grails/plugins" }
}

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}



// AST Sources.
//sourceSets {
//  ast {
//    groovy.srcDirs = ['src/ast/groovy']
//  }
//}

dependencies {
//  developmentOnly("org.springframework.boot:spring-boot-devtools")
  provided "org.springframework.boot:spring-boot-starter-logging"
  provided "org.springframework.boot:spring-boot-autoconfigure"
  provided "org.grails:grails-core"
  provided "org.springframework.boot:spring-boot-starter-undertow"
  provided "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-codecs"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-datasource"
//  compile "org.grails:grails-plugin-databinding"
  provided "org.grails:grails-web-boot"
  provided "org.grails:grails-logging"
  
//  compile "org.grails.plugins:cache"
//  compile "org.grails.plugins:async"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.4.18.Final"
  compile "org.grails.plugins:views-json"
  compile "org.grails.plugins:views-json-templates"
  
  compileOnly "io.micronaut:micronaut-inject-groovy"
  console "org.grails:grails-console"
  profile "org.grails.profiles:rest-api-plugin"


  provided "javax.xml.bind:jaxb-api:2.3.1"
  
  provided "org.grails:grails-gorm-testing-support"
  //    testCompile "org.mockito:mockito-core"
  // testCompile "io.micronaut:micronaut-http-client"
  provided "org.grails:grails-web-testing-support"
  // testCompile "io.micronaut:micronaut-http-client:1.0.3"


  provided "org.postgresql:postgresql:42.2.14"
  
  compile 'com.ibm.icu:icu4j:62.1'

//  provided 'org.grails.plugins:spring-security-core:4.0.0'
  provided 'org.springframework.security:spring-security-web:5.1.8.RELEASE'
  
  compile 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'

  provided "org.grails.plugins:geb"
  provided "org.seleniumhq.selenium:selenium-api:3.14.0"
//  provided "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
  
  
//  astCompile "org.grails:grails-core"
}

bootRun {
  ignoreExitValue true
  jvmArgs(
    '-Dspring.output.ansi.enabled=always',
    '-noverify',
    '-XX:TieredStopAtLevel=1',
    '-Xmx1024m')
  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
  configure(groovyOptions) {
    forkOptions.jvmArgs = ['-Xmx1024m']
  }
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false
//compileGsonViews {
//  packageName = "web-toolkit"
//}

// Writes plugin data
tasks.register("extendedConfigScript") { Task me ->
  
  // Find the correct file.
  Task configTask = project.tasks.getByName('configScript')
  File configFile = configTask.outputs.files.files.find { it.name == 'config.groovy' }
  if(!configFile) {
    return  // No need to continue if the file is not there
  }
  
  me.inputs.property('version', project.version)
  me.outputs.file(configFile)
  project.tasks.getByName('compileGroovy').dependsOn( me )
  me.dependsOn( configTask )
  
  doLast {
    configFile.append("""

/***** Extention *****/
withConfig(configuration) {
  inline(phase: 'CONVERSION') { source, context, classNode ->
    classNode.putNodeMetaData('projectVersion', '$project.version')
  }
}""")
  }
}

eclipse {
  classpath {
    defaultOutputDir = file('build/main')
    file {
      whenMerged {
        entries.each {
          if (it.hasProperty('output') && it.output.startsWith('bin/')) {
            it.output = 'build/' + it.output.substring(4)
          }
        }
      }
    }
  }
}

compileGsonViews {
  packageName = "web-toolkit"
}

